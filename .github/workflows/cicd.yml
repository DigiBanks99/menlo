name: CI/CD

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  workflow_call:

jobs:
  build_web:
    name: Build UI Binaries
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src/ui/web
    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4
      - uses: browser-actions/setup-chrome@v1
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: src/ui/web
      - name: Install packages
        run: npm ci
      - name: Build menlo-lib
        run: npm run build:lib
      - name: Build menlo-app
        run: npm run build:app
      - name: Publish menlo-app Artifact
        uses: actions/upload-artifact@v4
        with:
          name: menlo-app
          path: src/ui/web/dist/menlo-app/browser
          overwrite: true

  build_api:
    name: Build API Binaries
    runs-on: ubuntu-latest
    needs: build_web

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Download menlo-app Artifact to wwwroot
        uses: actions/download-artifact@v4
        with:
          name: menlo-app
          path: src/api/Menlo.Api/wwwroot
      - name: Restore dependencies
        run: dotnet restore src/Menlo.sln --runtime linux-x64
      - name: Publish
        run: dotnet publish src/api/Menlo.Api --no-restore --configuration Release --runtime linux-x64
      - name: Publish API Artifact
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: src/artifacts/publish/Menlo.Api/release_linux-x64
          overwrite: true

  build_docker:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: build_api
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ vars.DOCKER_REPOSITORY }}/${{ vars.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Download published API
        uses: actions/download-artifact@v4
        with:
          name: api
          path: src/artifacts/api
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: src
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=8.0

  deploy_infra:
    name: Deploy Azure Infra
    runs-on: ubuntu-latest
    needs: build_docker
    environment: Prod
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI script
        uses: azure/cli@v2
        with:
          azcliversion: 2.63.0
          inlineScript: |
            az deployment group create \
              --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
              --parameters infra/main.bicepparam \
              --name main-${{ github.run_id }}
        env:
          AZUREAD__DOMAIN: ${{ secrets.AZUREAD__DOMAIN }}
          AZUREAD__TENANTID: ${{ secrets.AZUREAD__TENANTID }}
          AZUREAD__CLIENTID: ${{ secrets.AZUREAD__CLIENTID }}
          COSMOS_ACCOUNT_NAME: ${{ vars.COSMOS_ACCOUNT_NAME}}
          COSMOS_CONTAINER_NAME_ELECTRICITY_USAGE: ${{ vars.COSMOS_CONTAINER_NAME_ELECTRICITY_USAGE }}
          COSMOS_CONTAINER_NAME_ELECTRICITY_PURCHASES: ${{ vars.COSMOS_CONTAINER_NAME_ELECTRICITY_PURCHASES }}
          COSMOS_DATABASE_NAME: ${{ vars.COSMOS_DATABASE_NAME }}
          CONTAINER_APP_NAME: ${{ vars.CONTAINER_APP_NAME }}
          CONTAINER_APP_ENVIRONMENT_NAME: ${{ vars.CONTAINER_APP_ENVIRONMENT_NAME }}
          CONTAINER_APP_IMAGE: ${{ vars.CONTAINER_APP_IMAGE }}
          CONTAINER_APP_CPU_CORE: ${{ vars.CONTAINER_APP_CPU_CORE }}
          CONTAINER_APP_MEMORY_SIZE: ${{ vars.CONTAINER_APP_MEMORY_SIZE }}
          CONTAINER_APP_CERTIFICATE_NAME: ${{ secrets.CONTAINER_APP_CERTIFICATE_NAME }}
          CONTAINER_APP_CERTIFICATE_DOMAIN_CONTROL_VALIDATION: ${{ vars.CONTAINER_APP_CERTIFICATE_DOMAIN_CONTROL_VALIDATION }}
          CONTAINER_APP_CERTIFICATE_SUBJECT_NAME: ${{ vars.CONTAINER_APP_CERTIFICATE_SUBJECT_NAME }}
          CONTAINER_APP_REVISION_SUFFIX: ${{ github.run_id }}

